#!/usr/bin/env groovy
// the "!#/usr/bin... is just to to help IDEs, GitHub diffs, etc properly detect the language and do syntax highlighting for you.
// thx to https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md

import groovy.json.JsonSlurper;

//final MF_ISSUE_REPOSITORY='metasfresh-webui-api';
//final MF_ISSUE_NUMBER='264';
//final MF_TARGET_BRANCH='test';

properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], parameters([string(defaultValue: 'metasfresh', description: '', name: 'MF_ISSUE_REPOSITORY'), string(defaultValue: '', description: '', name: 'MF_ISSUE_NUMBER'), string(defaultValue: 'stable', description: '', name: 'MF_TARGET_BRANCH')]), pipelineTriggers([])])

/**
 * Retrieves githup events for the given URL and page number..
 * Fails if a http response code != 200 is returned.
 *
 * See issue implement crude pagination for cherry-pick-issue-script https://github.com/metasfresh/metasfresh-scripts/issues/8.
 */
List retrieveEvents(final String eventsURLString, final int pageNo)
{
  final eventsURLStringWithPageNo="${eventsURLString}?page=${pageNo}";
  echo "eventsURLStringWithPageNo=${eventsURLStringWithPageNo}";

  // get a JSON containing all events about this issue from github
  // see https://developer.github.com/v3/issues/events/
  final apiUrl = new URL(eventsURLStringWithPageNo)
  final HttpURLConnection connection = apiUrl.openConnection();
  final responseCode = connection.getResponseCode();
  if(responseCode != 200)
  {
    String msg = """Http connection received responseCode=${responseCode};
responseMessage=${connection.getResponseMessage()}"""
    error msg;
  }
  final List eventsJson = new JsonSlurper().parse(new InputStreamReader(connection.getInputStream(), "UTF-8"));

  echo "Number of events for page=${pageNo}: ${eventsJson.size()}";
  return eventsJson;
}

/**
  * Returns a map of <repo-name, map of <sha1: commitUrl>>. Note that we rely on this map being a LinkedHashMap
  */
Map retrieveCommits(final String eventsURLString)
{
  echo "eventsURLString=${eventsURLString} (will prepend page number!)";

  // a map with <repo-name> => <list of [sha1: commitUrl]>
  final commits = [:];

  // issue https://github.com/metasfresh/metasfresh-scripts/issues/8 :
  // iterate with ascending page numbers as long as a non-empty list is returned
  int pageNo = 1;
  while(true)
  {
    List eventsJson = retrieveEvents(eventsURLString, pageNo);
    if(eventsJson.isEmpty())
    {
      return commits;
    }

    // increase the page number for the next iteration
    pageNo = pageNo + 1;

    // evaluate the events from retrieved in this iteration
    for (event in eventsJson)
    {
      if(!event.commit_url)
      {
        continue;
      }
      echo "event.commit_url=${event.commit_url}";
      final commitUrl = new URL(event.commit_url)
      final HttpURLConnection commitConnection = commitUrl.openConnection();
      final Map commitJson = new JsonSlurper().parse(new InputStreamReader(commitConnection.getInputStream(), "UTF-8"));

      // echo "commitJson.files.size()=${commitJson.files.size()}";
      // echo "commitJson.files[0].filename=${commitJson.files[0].filename}";
      // echo "commitJson.files=${commitJson.files}";

      if(commitJson.files.size() == 1 && 'ReleaseNotes.md'.equalsIgnoreCase(commitJson.files[0].filename) )
      {
        echo """Skipping commit ${event.commit_url} because is just altered the ReleaseNotes.md file.
  Note: the message of that commit starts with (first 50 chars):
  ${commitJson.commit.message.take(50)}...""";
        continue;
      }

      if(commitJson.parents.size() > 1)
      {
        echo """Skipping commit ${event.commit_url} because it has two parents (i.e. looks like a merge).
  Note: the message of that commit starts with (first 50 chars):
  ${commitJson.commit.message.take(50)}...""";
        continue;
      }

      // example:
      // "commit_url": "https://api.github.com/repos/metasfresh/metasfresh/commits/bc63a377a74ad44ed1d9e87cb1da75158f18a5d0",
      final matchGroup = (event.commit_url =~ /https:\/\/api.github.com\/repos\/metasfresh\/([^ ]+)\/commits\/([a-z0-9]+)/);
      // echo "hasGroup=${matchGroup.hasGroup()}";
      // echo "size=${matchGroup.size()}";

      // echo "matchGroup[0][0]=${matchGroup[0][0]}";
      // echo "repo name (matchGroup[0][1]): ${matchGroup[0][1]}";
      // echo "commit sha1 (matchGroup[0][2]): ${matchGroup[0][2]}";

      final String repoName = matchGroup[0][1];
      final String sha1 = matchGroup[0][2];

      if(commits[repoName])
      {
        //echo "Adding sha1=${sha1} to repoName=${repoName}";
        commits[repoName].put(sha1, commitJson.html_url);
      }
      else
      {
        //echo "Creating new list with sha1=${sha1} for repoName=${repoName}";
        commits[repoName] = [ (sha1): commitJson.html_url ];
      }
    }
  }
  //echo "commits=${commits}";
  return commits;
}

timestamps
{
  node('linux')
  {
    final eventsURLString = "https://api.github.com/repos/metasfresh/${MF_ISSUE_REPOSITORY}/issues/${MF_ISSUE_NUMBER}/events";
    final Map commits = retrieveCommits(eventsURLString);

    final List shellCommands = [];

    // IMPORTANT: commits.each { commit -> ... } does not work within the pipeline.
    // See http://stackoverflow.com/questions/40159258/impossibility-to-iterate-over-a-map-using-groovy-within-jenkins-pipeline
    for (commit in commits)
    {
      final repoName = commit.key;
      echo "Making commands for repoName=${repoName}";

      shellCommands.add('echo \"REPOS_DIR=${REPOS_DIR}\"');

      shellCommands.add('');
      shellCommands.add('echo \'#########################\'');
      shellCommands.add("echo '# Repository ${repoName}'");
      shellCommands.add('echo \'#########################\'');

      shellCommands.add('cd ${REPOS_DIR}'+"/${repoName}");

      shellCommands.add('');
      shellCommands.add("# get the target branch's latest version")
      shellCommands.add("git checkout ${MF_TARGET_BRANCH} && git pull");

      final cherryPickingBranch = "cp-gh${MF_ISSUE_NUMBER}-${MF_ISSUE_REPOSITORY}-to-${MF_TARGET_BRANCH}";
      shellCommands.add('');
      shellCommands.add("# create (or reset) a cherry-picking branch to make it easier to discard a failed cp");
      shellCommands.add("git checkout -B ${cherryPickingBranch}");

      shellCommands.add('');
      shellCommands.add('# perform the actual cherry-picking');
      final sha1AndCommitURLs = commit.value;
      for(sha1AndCommitURL in sha1AndCommitURLs)
      {
        //final cherryPickCmd = "git cherry-pick -x ${sha1AndCommitURL.key} # ${sha1AndCommitURL.value}";
        final cherryPickCmd = "cherrypick_if_not_yet_applied ${sha1AndCommitURL.key} # ${sha1AndCommitURL.value}";
        shellCommands.add(cherryPickCmd);
      }

      shellCommands.add('');
      shellCommands.add('# merge the result into the target branch');
      shellCommands.add("git checkout ${MF_TARGET_BRANCH}");
      shellCommands.add("git merge ${cherryPickingBranch}");
    }
    //echo "shellCommands=${shellCommands}";

    def shellCommandsFullstring = '';
    for (shellCommand in shellCommands)
    {
      shellCommandsFullstring = shellCommandsFullstring + """
${shellCommand}""";
    }

    echo "Preparing script file string";

    final String scriptFileStaticHeader = '''#!/bin/bash
set -e # stop on error
set -u # don't allow unset variables

#
# Uses git cherry to find out if the given changeset was already applied. If not ithe function cherry-picks it.
# Thx to http://gitready.com/intermediate/2009/04/16/find-unmerged-commits.html
# Further reading: https://git-scm.com/docs/git-cherry
#
cherrypick_if_not_yet_applied()
{
  local sha1=$1

  set +e # temporarily allow not 0 exit codes

  # i don't really understand git cherry, but *if* it returns the given sha1 (i.e. if grep exists with 0), then the respective change was not yet made
  git cherry ''' + MF_TARGET_BRANCH + ''' $sha1 | grep $sha1
  local grep_exit_code=$?

  set -e

  # thx to http://bencane.com/2014/09/02/understanding-exit-codes-and-how-to-use-them-in-bash-scripts/
  if [ $grep_exit_code -eq 0 ]
  then
    echo "Cherry-picking changeset with sha1=$sha1"
    git cherry-pick -x $sha1
  else
    echo "changeset with sha1=$sha1 was already applied; skipping it"
  fi
}''';

    def scriptFileFullString = """${scriptFileStaticHeader}

${shellCommandsFullstring}
    """;

    echo "Setting script file name";
    final scriptFileName="cherrypick_issue_${MF_ISSUE_REPOSITORY}_${MF_ISSUE_NUMBER}_to_${MF_TARGET_BRANCH}.sh";

    echo "Writing shell script to file ${scriptFileName}"
    writeFile file: scriptFileName, text: scriptFileFullString;

    echo "Archiving script file ${scriptFileName}"
    archiveArtifacts artifacts: scriptFileName;

    /////////////////////
    echo "Setting current build's title and description";
    final String issueTitle = "${MF_ISSUE_REPOSITORY}#${MF_ISSUE_NUMBER}";

    currentBuild.displayName = "${currentBuild.displayName} - ${issueTitle}";

    def descriptionURLsFullString = ''
    for (commit in commits)
    {
      final repoName = commit.key;
      descriptionURLsFullString = descriptionURLsFullString + """
      <b>${repoName}</b>
      <ul>
      """;
      final sha1AndCommitURLs = commit.value;
      for(sha1AndCommitURL in sha1AndCommitURLs)
      {
        descriptionURLsFullString = descriptionURLsFullString + """
        <li><a href='${sha1AndCommitURL.value}'>${sha1AndCommitURL.key}</a></li>""";
      }
      descriptionURLsFullString = descriptionURLsFullString + "</ul>";
    }

    currentBuild.description="""To perform the cherry-picking of issue <a href='https://github.com/metasfresh/${MF_ISSUE_REPOSITORY}/issues/${MF_ISSUE_NUMBER}'>metasfresh/${issueTitle}</a> into target branch <code>${MF_TARGET_BRANCH}</code>,
    the shell script created by this jobs can be run.
    It would cherry-pick the following commits:
    <p/>
    ${descriptionURLsFullString}
    """;
  } // node
  echo "done";
} // timestamps
